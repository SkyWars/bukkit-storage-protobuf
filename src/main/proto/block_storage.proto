package net.daboross.bukkitdev.bukkitstorageprotobuf.compiled;

option optimize_for = LITE_RUNTIME;

message ItemEnchantment {
    required uint32 id = 1;
    required uint32 level = 2;
}

message ExtraPotionEffect {
    required uint32 id = 1;
    required int32 duration = 2;
    required sint32 amplifier = 3;
    required bool ambient = 4;
    required bool particles = 5;
}

message MainPotionEffect {
    required string name = 1;
    required bool extended = 2;
    required bool upgraded = 3;
    required bool splash = 4;
    required bool lingering = 5;
}

message InventoryItem {
    required uint32 location = 1; // the location in the inventory
    required uint32 id = 2; // the item id
    optional uint32 amount = 3; // the item amount
    optional uint32 data = 4; // the item data
    optional uint32 durability = 6; // the item durability
    optional string name = 5; // the item name
    repeated string lore = 8; // the item lore
    repeated ItemEnchantment enchantment = 7; // the item's enchantments
    optional MainPotionEffect mainPotionEffect = 11; // post-1.9 API stored potion effect
    repeated ExtraPotionEffect extraPotionEffects = 9; // custom potion effects
    optional uint32 leatherArmorColorRbg = 10; // Leather armor color in RGB
}

message BlockInventory {
    repeated InventoryItem item = 1; // the list of items in this inventory
    required uint32 length = 2; // the total length of the inventory
}

message BlockCommandData {
    required string command = 1;
    optional string name = 2;
}

message Block {
    required uint32 id = 1; // the block id
    optional uint32 data = 2; // the block data
    optional BlockInventory inventory = 3; // the inventory in this block, only for chests, dispensers, or other blocks with an inventory.
    optional BlockCommandData command = 4; // the command stored in a command block
}

message BlockRow {
    repeated Block block = 1; // this is varying along the Z axis, Z=0 to Z=z_length
}

message BlockPlane {
    repeated BlockRow row = 1; // this is varying along the X axis, X=0 to X=x_length
}

message BlockArea {
    repeated BlockPlane plane = 1; // this is varying along the Y axis, Y=0 to Y=y_length
}
